cookie:
  # domain: example.com
  # name: __Secure-whawty-nignx-sso
  # secure: true
  expire: 23h
  keys:
  - name: foo-priv
    ed25519:
      ## generate with `openssl genpkey -algorithm ED25519`
      private-key: |
        -----BEGIN PRIVATE KEY-----
        MC4CAQAwBQYDK2VwBCIEIIgITVt9BRor5Dn2v7rQu2I8siicIUGr7+QS9PqNSSXk
        -----END PRIVATE KEY-----
  # - name: foo-pub
  #   ed25519:
  #     ## generate with `openssl pkey -pubout` and paste in pem-encoded private key
  #     public-key: |
  #       -----BEGIN PUBLIC KEY-----
  #       MCowBQYDK2VwAyEA7dAVNSCBGIBHsCDX0z1qOsMIrErkgLbgybWW17YkleU=
  #       -----END PUBLIC KEY-----
  # - name: bar-priv
  #   ed25519:
  #     ## generate with `openssl genpkey -algorithm ED25519 -out ./contrib/bar_ed25519_priv.pem`
  #     private-key-file: ./contrib/bar_ed25519_priv.pem
  # - name: bar-pub
  #   ed25519:
  #     ## generate with `openssl pkey -in ./contrib/bar_ed25519_priv.pem -pubout -out ./contrib/bar_ed25519_pub.pem`
  #     public-key-file: ./contrib/bar_ed25519_pub.pem

auth:
  static:
    htpasswd: contrib/htpasswd
  # whawty:
  #   store: contrib/whawty-auth-store.yml
  # ldap:
  #   servers:
  #   - ldaps://ldap1.example.com
  #   - ldaps://ldap2.example.com
  #   tls:
  #     start-tls: false
  #     insecure-skip-verify: true
  #     ca-certificates:
  #     - root-ca.pem
  #### directly bind to this DN, {0} will be replaced by the username, leave empty to search the users DN using the parameters below
  #   user-dn-template: "uid={0},ou=People,dc=helsinki,dc=at"
  #### bind to this credentials when searching for the user DN, leave empty for anonymous bind
  #   manager-dn: "cn=manager,dc=example,dc=com"
  #   manager-password: "secret"
  #### this filter and base will be used when searching for the user DN, {0} will be replaced by the username
  #   user-search-base: "ou=People,dc=example,dc=com"
  #   user-search-filter: "(&(objectClass=inetOrgPerson)(uid={0}))"

web:
  login:
    title: "example.com SSO"
    # templates: path/to/templates  ## will look for *.htmpl files here
    # ui-path: /path/to                ## http path where static ui files are hosted

  # tls:
  #   certificate: "/path/to/server-crt.pem"
  #   certificate-key:  "/path/to/server-key.pem"
  #   min-protocol-version: "TLSv1.2"
  #   # max-protocol-version: "TLSv1.3"
  #   ciphers:
  #   # - RSA_WITH_RC4_128_SHA
  #   # - RSA_WITH_3DES_EDE_CBC_SHA
  #   # - RSA_WITH_AES_128_CBC_SHA
  #   # - RSA_WITH_AES_256_CBC_SHA
  #   # - RSA_WITH_AES_128_CBC_SHA256
  #   # - RSA_WITH_AES_128_GCM_SHA256
  #   # - RSA_WITH_AES_256_GCM_SHA384
  #   # - ECDHE_ECDSA_WITH_RC4_128_SHA
  #   # - ECDHE_ECDSA_WITH_AES_128_CBC_SHA
  #   # - ECDHE_ECDSA_WITH_AES_256_CBC_SHA
  #   # - ECDHE_RSA_WITH_RC4_128_SHA
  #   # - ECDHE_RSA_WITH_3DES_EDE_CBC_SHA
  #   # - ECDHE_RSA_WITH_AES_128_CBC_SHA
  #   # - ECDHE_RSA_WITH_AES_256_CBC_SHA
  #   # - ECDHE_ECDSA_WITH_AES_128_CBC_SHA256
  #   # - ECDHE_RSA_WITH_AES_128_CBC_SHA256
  #   - ECDHE_RSA_WITH_AES_128_GCM_SHA256
  #   # - ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
  #   - ECDHE_RSA_WITH_AES_256_GCM_SHA384
  #   # - ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  #   - ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256
  #   # - ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
  #   - TLS_AES_128_GCM_SHA256
  #   - TLS_AES_256_GCM_SHA384
  #   - TLS_CHACHA20_POLY1305_SHA256
  #   prefer-server-ciphers: true
  #   # ecdh-curves:
  #   # - secp256r1
  #   # - secp384r1
  #   # - secp521r1
  #   # - x25519
  #   # session-tickets: true
  #   # session-ticket-key: "b947e39f50e20351bdd81046e20fff7948d359a3aec391719d60645c5972cc77"
